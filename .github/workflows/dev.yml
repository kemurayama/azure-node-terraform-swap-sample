name: Development

on:
  push:
    branches-ignore:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  RG_NAME: rg-terraform-swap
  WEBAPP_NAME: kemuraswap

  NODE_VERSION: "12.19"
  TERRAFORM_VERSION: 0.14.2

jobs:
  terraform:
    name: 'Terraform'
    environment:
      name: Staging
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        shell: bash
        run: |
          terraform init -backend-config=resource_group_name=${{ secrets.TERRAFORM_BACKEND_RGNAME }} \
             -backend-config=storage_account_name=${{ secrets.TERRAFORM_BACKEND_SA }} \
             -backend-config=container_name=${{ secrets.TERRAFORM_BACKEND_CNT }} \
             -backend-config=key=${{ secrets.TERRAFORM_BACKEND_KEY }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: |
          terraform plan  \
            -var 'resource_group=${{env.RG_NAME}}'  \
            -var 'webapp_name=${{env.WEBAPP_NAME}}'

  node:
    name: 'Node'
    environment:
      name: Staging
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './webapp'
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present